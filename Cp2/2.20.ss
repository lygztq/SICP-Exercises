(define (append l x)
  (if (null? l) (cons x (list)) (cons (car l) (append (cdr l) x)))
)

(define (same_parity p)
  (define (impl ret curr first_parity)
    (cond ((null? curr) ret)
          ((= first_parity (remainder (car curr) 2)) (impl (append ret (car curr)) (cdr curr) first_parity))
          (else (impl ret (cdr curr) first_parity))
    )
  )
  (if (null? p) (list)
    (let ((first_parity (remainder (car p) 2)))
      (impl (list) p first_parity)
    )
  )
)

(display (same_parity (list 1 2 3 4 5)))
(exit)
