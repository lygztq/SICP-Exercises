(define (make_interval a b) (cons a b))
(define (upper_bound x) (car x))
(define (lower_bound x) (cdr x))
(define (display_interval name x)
  (display name)
  (display ": (")
  (display (lower_bound x))
  (display ", ")
  (display (upper_bound x))
  (display ")")
  (newline)
)
(define (sub_interval x y)
  (make_interval
    (- (lower_bound x) (upper_bound y))
    (- (upper_bound x) (lower_bound y))
  )
)
(define (add_interval x y)
  (make_interval (+ (lower_bound x) (lower_bound y))
                 (+ (upper_bound x) (upper_bound y))))
(define (div_interval x y)
      (mul_interval x
                    (make_interval
                     (/ 1.0 (upper_bound y))
                     (/ 1.0 (lower_bound y)))))

(define (mul_interval x y)
  (let ((p1 (* (lower_bound x) (lower_bound y)))
        (p2 (* (lower_bound x) (upper_bound y)))
        (p3 (* (upper_bound x) (lower_bound y)))
        (p4 (* (upper_bound x) (upper_bound y))))
    (make_interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (par1 r1 r2)
  (div_interval (mul_interval r1 r2)
                (add_interval r1 r2)))
(define (par2 r1 r2)
  (let ((one (make_interval 1 1))) 
    (div_interval one
                  (add_interval (div_interval one r1)
                                (div_interval one r2)))))

; (define p1 (make_interval 0.1  0.2))
; (define p2 (make_interval 0.01 0.02))

(define p1 (make_interval 1000 20000))
(define p2 (make_interval 3000 40000))

(display_interval "par1" (par1 p1 p2))
(display_interval "par2" (par2 p1 p2))
(exit)
